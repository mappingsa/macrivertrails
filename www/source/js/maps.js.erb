/*
    build_target: '<%= build_target %>',
    base_uri: '<%= base_uri %>'
*/

  // Global variable with query string for map page. This is a standard HTTP query string,
  // maintained this way in case I figure out a way to use a query string on the URL without
  // jQuery Mobile creating duplicate map pages. It's used by the createMap function
  // to modify the map according to the query parameters. It is then cleared. If the map
  // page is entered again, then, the code will see the empty query string, and will not
  // modify the map at all. In this way, when the user goes "back" to the map, nothing is
  // done beyond transitioning to the dom-cached map page.
  //
  // Unwanted fallout from this is that the query string isn't maintained in the URL, and
  // so website users are unable to bookmark specific map configurations.
  var mapQuery;

  function onInfoWindowLink (href) {
    $.mobile.changePage(href,
      {
      "transition": "slide"
      } );
    return false;
    };

$(function() {
  var
    baseUri = "<%= base_uri ? base_uri : '../' %>",
    testing = <%= build_target == 'debug' %>,
    testingOutOfRegion = false,  // Set true for easy testing of dynamic user marker on real device when out of region

    zoomLevelAll = 7,         // Initial zoom for nearby, todo, browse trail headers
    zoomLevelNearby = 11,     // nearby, todo, browse once location is known
    zoomLevelPlace = 14,      // Always use this zoom for get directions
    zoomLevelUser = 19,       // "locate me" button

    useSmoothZoom = false,     // true to use smooth zoom for trail markers/location button
    smoothZoomTimePerLevel = 0, // Mimimum time per zoom level, in mSec, seems best left at 0

    maxNearbyDist = 1000,     // Max km from default center to center on user location, or 0 to disable
                              // If user is further than this, then we will center on default
                              // location

    // TODO: Update this to geographical center of the region
    defaultLat = -32.249085,  // Default center location (Dubbo)
    defaultLng = 148.604826,

    geoLocationActiveTime = testing ? 20000 : 60000, // # of mSec to run dynamic geolocation before shutting off

    previousMapQuery,        // Saved previous map query, to avoid unnecessary redraws


  // TODO: initialization of these marker images should be deferred to the first pageinit, so that
  // Google Maps JS is not required until the first use of the map page. They are fine here for
  // now, since we currently still always load Google Maps JS in <head>.
  //
  // It is not desireable to initialize the big places array on every pageinit, so it is initialized once
  // here in the outer closure.
  //
  // We will need to keep an "initialized" variable here, and on first pageinit if false, create the
  // marker images and backfill the places table. (i.e. the icon variables should be removed here in the
  // outer closure and initialized on first pageinit, which can be done based on the group name. )

    pinSize = new google.maps.Size(30,42),
    altPinSize = new google.maps.Size(32,37),
    infoBoxOffset = new google.maps.Size(-30, -10),
    hereMarkerSize = new google.maps.Size(17, 17),

    pixelRatio = window.devicePixelRatio || 1.0,
    use2X = pixelRatio >= 1.5,
    res = use2X ? "@2x" : "",

    cycle = new google.maps.MarkerImage( baseUri + "map/images/Cycle-pin-map" + res + ".png", pinSize, null, null, pinSize ),
    heritage = new google.maps.MarkerImage( baseUri + "map/images/Heritage-pin-map" + res + ".png", pinSize, null, null, pinSize ),
    nature = new google.maps.MarkerImage( baseUri + "map/images/Nature-pin-map" + res + ".png", pinSize, null, null, pinSize ),
    produce = new google.maps.MarkerImage( baseUri + "map/images/Produce-pin-map" + res + ".png", pinSize, null, null, pinSize ),
    river = new google.maps.MarkerImage(baseUri + "map/images/River-pin-map" + res + ".png", pinSize, null, null, pinSize ),
    riverbedz = new google.maps.MarkerImage(baseUri + "map/images/Riverbedz-pin-map" + res + ".png", pinSize, null, null, pinSize ),
    fishing = new google.maps.MarkerImage(baseUri + "map/images/Fishing-pin-map" + res + ".png", pinSize, null, null, pinSize ),

    boatramp = new google.maps.MarkerImage( baseUri + "map/images/boatramp" + res + ".png", altPinSize, null, null, altPinSize ),
    info = new google.maps.MarkerImage( baseUri + "map/images/info" + res + ".png", altPinSize, null, null, altPinSize ),
    rv = new google.maps.MarkerImage( baseUri + "map/images/rv" + res + ".png", altPinSize, null, null, altPinSize ),

    hereMarker = new google.maps.MarkerImage ( baseUri + "map/images/greendot" + res + ".png", hereMarkerSize, null, new google.maps.Point(8.5, 8.5), hereMarkerSize),

    hereMarkerZindex = 20,

    markerListItemTemplate =
    '<li class="big-arrow" data-icon="false">' +
      '<a href="|link|">|title||distance|' +
        '<img src="' + baseUri + 'images/|pin|-pin|res|.png" alt="|alt|" class="ui-li-icon trail-pin">' +
      '</a>' +
    '</li>',

    markerListNoteLocationKnown = "Distance displayed in list is based on a straight path from your location.",
    markerListNoteLocationUnknown =
      "Distances are not shown because your current location is not known. " +
      "This might be because a position could not be determined at this time from GPS or other sources, " +
      "because your computer or device lacks geolocation services, or because you have not " +
      "enabled geolocation services.",

//_place_data.js.erb start
  groups = {
    boatramp:  { zIndex: 1,   showAlways: true,  icon: boatramp },
    rv:        { zIndex: 2,   showAlways: true,  icon: rv },
    info:      { zIndex: 3,   showAlways: true,  icon: info },
    cycle:     { zIndex: 10,  showAlways: false, icon: cycle },
    produce:   { zIndex: 10,  showAlways: false, icon: produce },
    heritage:  { zIndex: 10,  showAlways: false, icon: heritage },
    nature:    { zIndex: 10,  showAlways: false, icon: nature },
    river:     { zIndex: 10,  showAlways: false, icon: river },
    riverbedz: { zIndex: 10,  showAlways: false, icon: riverbedz },
    fishing:   { zIndex: 10,  showAlways: false, icon: fishing }
  },

  places = [
    {group: "boatramp", item: "", position: "-32.21039,  148.23812", title:  "Boat Ramp" },
    {group: "boatramp", item: "", position: "-32.192102, 148.610495", title: "Boat Ramp"  },
    {group: "boatramp", item: "", position: "-32.248102, 148.595737", title: "Boat Ramp"  },
    {group: "boatramp", item: "", position: "-32.250138, 148.598792", title: "Boat Ramp"  },
    {group: "boatramp", item: "", position: "-32.541935, 148.935469", title: "Boat Ramp"  },
    {group: "boatramp", item: "", position: "-32.22588,  148.247326", title: "Boat Ramp"  },
    {group: "boatramp", item: "", position: "-32.766391, 149.143586", title: "Boat Ramp"  },
    {group: "boatramp", item: "", position: "-31.685998, 147.834187", title: "Boat Ramp"  },
    {group: "rv", item: "", position: "-32.277955, 148.588445", title: "Dubbo RV dump site" },
    {group: "rv", item: "", position: "-31.696939, 147.839889", title: "Warren RV dump site" },
    {group: "rv", item: "", position: "-32.553644, 148.928628", title: "Wellington RV dump site" },
    {group: "rv", item: "", position: "-32.233914, 148.242014", title: "narromine RV dump site"},
    {group: "info", item: "", position: "-32.553037, 148.940964", title: "Wellington Vistor Information Centre" },
    {group: "info", item: "", position: "-32.243408, 148.601667", title: "Dubbo Visitor Information Centre" },
    {group: "info", item: "", position: "-31.699748, 147.837154", title: "Warren Visitor Information Centre" },
    {group: "info", item: "", position: "-32.233914, 148.242014", title: "Narromine Vistor Information Centre" },
    {group: "cycle", item: "geurie",  position: "-32.400028, 148.818317", title: "Geurie-Bald Hill Mountain Bike Trails" },
    {group: "cycle", item: "beni", position: "-32.246925, 148.72464", title: "Beni State Conservation Area cycling, Dubbo" },
    {group: "cycle", item: "powterpark", position: "-32.239314, 148.611986", title: "Powter Park BMX Track, Dubbo" },
    {group: "cycle", item: "muggahill",  position: "-32.225101, 148.663177", title: "Mugga Hill Mountain Bike Park, Dubbo" },
    {group: "cycle", item: "trackerhill",  position: "-32.256086, 148.589706", title: "Tracker Riley Cycleway and Walking Trail, Dubbo" },
    {group: "cycle",  item: "warrens", position: "-31.706786, 147.842214", title: "Warrens walking and cycling tracks" },
    {group: "produce", item: "edgertonnursery",  position: "-32.230047, 148.239667", title: "Edgerton Nursery, Narromine" },
    {group: "produce", item: "andonbel",  position: "-32.252942, 148.264381", title: "Andonbel Alpacas and Coffee Shop, Narromine" },
    {group: "produce", item: "cottagecraft",  position: "-32.23074, 148.240036", title: "Narromine Cottage Craft Shop" },
    {group: "produce", item: "woodshed",  position: "-32.232971, 148.240082", title: "The Woodshed Gallery, Narromine" },
    {group: "produce", item: "ewetwo",  position: "-32.033397, 147.985794", title: "Ewe Two, Trangie" },
    {group: "produce", item: "bellriver",  position: "-32.687631, 148.945311", title: "Bell River Estate, Wellington," },
    {group: "produce", item: "cactuscafe",  position: "-32.551264, 148.942136", title: "Cactus Cafe and Gallery, Wellington" },
    {group: "produce", item: "lazyriver",  position: "-32.296532, 148.627426", title: "Lazy River Estate, Dubbo" },
    {group: "produce", item: "farmers",  position: "-32.243450, 148.601672", title: "Farmers Market, Dubbo" },
    {group: "produce", item: "redearth",  position: "-32.293483, 148.585164", title: "Red Earth Estate, Dubbo" },
    {group: "produce", item: "limegrove",  position: "-32.191757, 148.189713", title: "Lime Grove, Narromine" },
    {group: "produce", item: "macquariegrove",  position: "-32.21899, 148.241791", title: "Macquarie Grove Vineyard, Narromine" },
    {group: "produce", item: "tilleyswines",  position: "-31.711003, 147.845267", title: "Tilleys Wines, Warren" },
    {group: "heritage", item: "cavesbottle",  position: "-32.620367, 148.939019", title: "Caves Bottle House, Wellington" },
    {group: "heritage", item: "peterbrowne",  position: "-33.089809, 148.869247", title: "Peter Browne Studio Gallery, Molong" },
    {group: "heritage", item: "erisfleming",  position: "-32.758392, 148.928178", title: "Eris Fleming Gallery, Wellington" },
    {group: "heritage", item: "oxley", position: "-32.551336, 148.942775", title: "Oxley Museum, Wellington" },
    {group: "heritage", item: "billoshea",  position: "-32.256493, 148.646622", title: "Bill O Sheas Studio Gallery, Dubbo" },
    {group: "heritage", item: "loungegallery",     position: "-32.244167, 148.582703", title: "Lounge Gallery and Cafe, Dubbo" },
    {group: "heritage", item: "hermitagehill",  position: "-32.560369, 148.960497", title: "Hermitage Hill Resort" },
    {group: "heritage", item: "gratton",  position: "-32.286239, 148.602864", title: "Tim Gratton & Dundullimal" },
    {group: "heritage", item: "wellingtoncaves",  position: "-32.620994, 148.938186", title: "Wellington Caves Phosphate Mine and Osawano Japanese Gardens" },
    {group: "heritage", item: "lion",  position: "-32.540578, 148.930692", title: "Lion of Waterloo country pub, Wellington" },
    {group: "heritage", item: "garlinggallery", position: "-32.334639, 148.759894", title: "Garling Gallery, Wongarbon" },
    {group: "heritage", item: "dundullimal",  position: "-32.286239, 148.602864", title: "Dundullimal Homestead Dubbo" },
    {group: "heritage", item: "pioneer",  position: "-32.302008, 148.625236", title: "Pioneer cemetery, Dubbo" },
    {group: "heritage", item: "westernplains",  position: "-32.249912, 148.609604", title: "Western Plains Cultural Centre, Dubbo" },
    {group: "heritage", item: "gaol",  position: "-32.245766, 148.601624", title: "Old Dubbo Gaol" },
    {group: "heritage", item: "shoyeon",  position: "-32.253908, 148.634189", title: "Shoyeon Japanese Garden, Dubbo" },
    {group: "heritage", item: "aviation",  position: "-32.222778, 148.229125", title: "Narromine Aviation Museum" },
    {group: "heritage", item: "woodshed", position: "-32.232971, 148.240082", title: "The Woodshed Gallery, Narromine" },
    {group: "nature", item: "burrendonggarden",  position: "-32.688297, 149.108519", title: "Burrendong Botanic Garden and Arboretum" },
    {group: "nature", item: "tarongazoo",  position: "-32.272233, 148.586328", title: "Taronga Western Plains Zoo, Dubbo" },
    {group: "nature", item: "dubbobotanic",  position: "-32.253117, 148.635050", title: "Dubbo Regional Botanic Garden" },
    {group: "nature", item: "wongarbon",  position: "-32.330067, 148.767014", title: "Wongarbon Tank Reserve" },
    {group: "nature", item: "rotarywetland",  position: "-32.247919, 148.236222", title: "Rotary Wetland, Narromine" },
    {group: "nature", item: "argonauts",  position: "-32.031326, 147.987045", title: "Argonauts Park-Goan Waterhole, Trangie" },
    {group: "nature", item: "tigerbay",  position: "-31.694647, 147.842550", title: "Tiger Bay Wetland, Warren" },
    {group: "nature", item: "wetlandviewing",  position: "-30.880064, 147.697353", title: "Wetland viewing platform Macquarie Marshes" },
    {group: "nature", item: "willieretreat", position: "-30.898687, 147.465805", title: "Willie Retreat Macquarie Marshes" },
    {group: "nature", item: "platypus",  position: "-32.553092, 148.941039", title: "Platypus spotting, Wellington" },
    {group: "nature", item: "mountarther",  position: "-32.553067, 148.916225", title: "Mount Arthur Reserve and Lookout, Wellington" },
    {group: "nature", item: "macquariemarshsouth",  position: "-30.924103, 147.459008", title: "South Macquarie Marsh Nature Reserve" },
    {group: "nature", item: "macquariemarshnorth",  position: "-30.814878, 147.500178", title: "North Macquarie Marsh Nature Reserve" },
    {group: "nature", item: "touristpark",  position: "-32.223497, 148.229931", title: "Scenic helicopter rides over the Macquarie Marshes" },
    {group: "river", item: "mookereawa", position: "-32.770344, 149.148642", title: "Mookerawa Waters State Park Lake Burrendong" },
    {group: "river", item: "johnoxley", position: "-32.542912, 148.933151", title: "John Oxley Park, Wellington" },
    {group: "river", item: "cameronpark",  position: "-32.553005, 148.941086", title: "Cameron and Pioneer Park, Wellington" },
    {group: "river", item: "sirrodenpark",  position: "-32.255192, 148.588318", title: "Sir Roden Cutler Park, Dubbo" },
    {group: "river", item: "riverbankpark",  position: "-32.246338, 148.599518", title: "Riverbank Park, Dubbo" },
    {group: "river", item: "lionspark",  position: "-32.249222, 148.594892", title: "Lions Park West Dubbo" },
    {group: "river", item: "langleys",  position: "-32.246685, 148.599045", title: "Langleys River Cruises, Dubbo" },
    {group: "river", item: "sandycreek",  position: "-31.748814, 147.783692", title: "Sandy Creek Rest Area, Warren" },
    {group: "river", item: "lionmacquarieparks",    position: "-31.703211, 147.83931", title: "Lions Park, Warren" },
    {group: "river", item: "otherpark",    position: "-31.698100, 147.838717", title: "Macquarie Park, Warren" },
    {group: "river", item: "moreparks",  position: "-31.695536, 147.838031", title: "Victoria Oxley and more river parks, Warren " },
    {group: "river", item: "ebertpark",  position: "-31.699581, 147.839622", title: "Ebert Park, Warren" },
    {group: "river", item: "oxleypark",  position: "-31.696989, 147.839881", title: "Oxley Park, Warren" },
    {group: "river", item: "orchardpark",  position: "-31.700569, 147.842375", title: "Orchard Street Park, Warren" },
    {group: "river", item: "willieretreat",  position: "-30.898687, 147.465805", title: "Willie Retreat Macquarie Marshes" },
    {group: "river", item: "riversidetp",  position: "-31.558367, 147.180984", title: "Nyngan Riverside Tourist Park" },
    {group: "river", item: "sport", position: "-32.707633, 149.1149946", title: "Lake Burrendong Sport and Recreation" },
    {group: "river", item: "wellingtoncp", position: "-32.542417, 148.942706", title: "Wellington Riverside Caravan Park" },
    {group: "river", item: "terramungamine",  position: "-32.168713, 148.585022", title: "Terramungamine Reserve, Dubbo" },
    {group: "river", item: "sandybeach",  position: "-32.256325, 148.590622", title: "Sandy Beach, Dubbo" },
    {group: "river", item: "rotarypark",  position: "-32.226742, 148.246664", title: "Rotary Riverside Park, Narromine" },
    {group: "river", item: "macquairecp",  position: "-31.695214, 147.8398086", title: "Macquarie Caravan Park, Warren" },
    {group: "river", item: "macquairecanoe",  position: "-32.542912, 148.933151", title: "Macquarie river canoe and kayak trail" },
    {group: "river", item: "big4",  position: "-32.257458, 148.587414", title: "BIG 4 Parklands, Dubbo" },
    {group: "river", item: "lakeburrendong",  position: "-32.688095, 149.108505", title: "Lake Burrendong State Park" },
    {group: "riverbedz", item: "abeltasman",  position: "-32.254986, 148.587600", title: "Abel Tasman Motor Inn, Dubbo" },
    {group: "riverbedz", item: "bridgemotel",  position: "-32.544325, 148.941369", title: "Bridge Motel, Wellington" },
    {group: "riverbedz", item: "willieretreat",  position: "-30.898687, 147.465805", title: "Willie Retreat Macquarie Marshes" },
    {group: "riverbedz", item: "lakeburrendong",  position: "-32.688095, 149.108505", title: "Lake Burrendong State Park" },
    {group: "riverbedz", item: "big4",  position: "-32.257458, 148.587414", title: "BIG 4 Parklands, Dubbo" },
    {group: "riverbedz", item: "wellingtoncp",  position: "-32.542417, 148.942706", title: "Wellington Riverside Caravan Park" },
    {group: "riverbedz", item: "hermitagehill", position: "-32.560369, 148.960497", title: "Hermitage Hill Country Retreat and Function Centre, Wellington" },
    {group: "riverbedz", item: "macquairecp",  position: "-31.695214, 147.839808", title: "Macquarie Caravan Park, Warren" },
    {group: "riverbedz", item: "riversidetp",  position: "-31.558367, 147.180984", title: "Nyngan Riverside Tourist Park" },
    {group: "riverbedz", item: "touristpark",  position: "-32.223497, 148.229931", title: "Tourist Park & Motel, Narromine" },
    {group: "riverbedz", item: "peppercorn",  position: "-32.225553, 148.238061", title: "Peppercorn Motor Inn, Narromine" },
    {group: "fishing", item: "mookerawa",  position: "-32.770344, 149.148642", title: "Mookerawa Waters and Lake Burrendong State Parks, near Wellington" },
    {group: "fishing", item: "johnoxley", position: "-32.542912, 148.933151", title: "John Oxley Park, Wellington" },
    {group: "fishing", item: "ponto", position: "-32.465889, 148.820753", title: "Ponto Falls Reserve" },
    {group: "fishing", item: "scabbing", position: "-32.430489, 148.810336", title: "Scabbing Flat Reserve, Geurie Bridge" },
    {group: "fishing", item: "peach", position: "-32.447453, 148.776808", title: "Peach Trees Reserve" },
    {group: "fishing", item: "bril", position: "-32.414511, 148.724722", title: "Bril Bral Reserve" },
    {group: "fishing", item: "butler", position: "-32.314511, 148.621225", title: "Butler&rsquo;s Falls Reserve" },
    {group: "fishing", item: "pilcher", position: "-32.299411, 148.622853", title: "Pilcher&rsquo;s Reserve" },
    {group: "fishing", item: "caroline", position: "-32.294275, 148.627356", title: "Caroline&rsquo;s Reserve" },
    {group: "fishing", item: "dundullimal", position: "-32.283044, 148.601728", title: "Dundullimal Reserve" },
    {group: "fishing", item: "sandybeach",  position: "-32.256325, 148.590622", title: "Sandy Beach, Dubbo" },
    {group: "fishing", item: "riverbankpark",  position: "-32.246338, 148.599518", title: "Riverbank Park, Dubbo" },
    {group: "fishing", item: "lionspark",  position: "-32.249222, 148.594892", title: "Lions Park West Dubbo" },
    {group: "fishing", item: "devil", position: "-32.228244, 148.611044", title: "Devil&rsquo;s Hole Reserve, Dubbo" },
    {group: "fishing", item: "terramungamine",  position: "-32.168713, 148.585022", title: "Terramungamine Reserve, Dubbo" },
    {group: "fishing", item: "redbank", position: "-32.168867, 148.530711", title: "Redbank Reserve" },
    {group: "fishing", item: "north", position: "-32.172192, 148.510972", title: "North Burrabadine Reserve" },
    {group: "fishing", item: "whylandra", position: "-32.189733, 148.495825", title: "Whylandra Crossing Reserves" },
    {group: "fishing", item: "dickigundie", position: "-32.191972, 148.456272", title: "Dickigundie Reserve" },
    {group: "fishing", item: "minore", position: "-32.194422, 148.395839", title: "Minore Falls Reserve" },
    {group: "fishing", item: "brummagen", position: "-32.232447, 148.363664", title: "Brummagen Bridge Reserve" },
    {group: "fishing", item: "reserve", position: "-32.227100, 148.352958", title: "Brummagen Reserve" },
    {group: "fishing", item: "webb", position: "-32.243444, 148.295431", title: "Webb&rsquo;s Siding Reserve, Narromine" },
    {group: "fishing", item: "rotarypark",  position: "-32.226742, 148.246664", title: "Rotary Riverside Park, Narromine" },
    {group: "fishing", item: "mack", position: "-32.196242, 148.247581", title: "Mack&rsquo;s Reserve" },
    {group: "fishing", item: "turkey", position: "-32.142442, 148.233997", title: "Turkey Farm Reserve" },
    {group: "fishing", item: "timbrebongie", position: "-32.131333, 148.246408", title: "Timbrebongie Falls Reserve" },
    {group: "fishing", item: "weir", position: "-31.937592, 148.141358", title: "Gin Gin Weir" },
    {group: "fishing", item: "riverside", position: "-31.904656, 148.098200", title: "Riverside Access" },
    {group: "fishing", item: "gin", position: "-31.915883, 148.082517", title: "Gin Gin Bridge Reserve" },
    {group: "fishing", item: "rest", position: "-31.796111, 147.979722", title: "Riverside Rest Area" },
    {group: "fishing", item: "warren", position: "-31.734811, 147.866556", title: "Warren Weir Reserve - upstream" },
    {group: "fishing", item: "victora",  position: "-31.695536, 147.838031", title: "Oxley Park - Macquarie Park - Ebert Park - Victoria Parks, Warren" },
    {group: "fishing", item: "brian", position: "-31.685056, 147.835917", title: "Brian Egan Weir, Warren" },
    {group: "fishing", item: "quinines", position: "-31.655992, 147.792636", title: "Quinines Reserve, Warren" }
  ]
// _place_data.js.erb end
,
// _utils.js.erb start
// Utility functions included in the outer closure of maps.js

<% if build_target == 'debug' %>
      // Formats number with fixed digits
    pad = function(num, digits, padChar) {
        var str = num.toString(),
            _padChar = padChar || "0";
        while (str.length < digits) { str = _padChar + str; }
        return str;
      },

      // Format time for logging
    toTime = function(date) {
        return pad(date.getHours(), 2) + ":" +
               pad(date.getMinutes(), 2) + ":" +
               pad(date.getSeconds(), 2) + "." +
               pad(date.getMilliseconds(), 3);
      },
<% end %>

logTime = function(msg) {
<%if build_target == 'debug' %>
      var time = new Date();
      console.log(toTime(time) + " " + msg);
<% end %>
  },

// remove multiple, leading or trailing spaces
trim = function(s) {
    s = s.replace(/(^\s*)|(\s*$)/gi,"");
    s = s.replace(/[ ]{2,}/gi," ");
    s = s.replace(/\n /,"\n");
    return s;
    },

// Is the given group an "info-type" group?
// These are places that do not have an associated page.
groupShowAlways = function(group) {
  return groups[group].showAlways;
  },

groupZindex = function(group) {
  return groups[group].zIndex;
  },

groupIcon = function(group) {
  return groups[group].icon;
  },

showMap = function(queryString, transition) {
  var mapUri = "<%= (base_uri ? base_uri : '../') + 'map/index.html' %>";
  mapQuery = queryString;
  $.mobile.changePage( mapUri, transition ? { transition: transition} : undefined );
  };

  logTime("maps.js");

  $(document).on('pageinit', ".ui-page", function() {
    var $page = $(this);
    // Get Directions button on place menu
    $page.find(".nearby-tab a").on("click", function(event) {
      event.preventDefault();
      if ( $page.is(".map-page") ) {
        mapQuery = "location=me";
        createMap();
        }
      else {
        showMap("location=me", "fade");
        }
      });

    // Get Directions button on place menu
    $page.find(".directions-btn").on("vclick click", function(event) {
      event.preventDefault();
      if (event.type === "click") { return; }  // For click, prevent the default action, since we already
                                               // did everything we want on the vclick
      var section = $page.jqmData("section"),
        item = $page.jqmData("item");
      showMap("section=" +  section + "&item=" + item);
      });

    $page.find(".browse-list").on("vclick", ".ui-li-divider", function(event) {
      // Not an <a> tag, so don't need to deal with click
      var $li = $(this),
      section = $li.jqmData("section");
      showMap("section=" + section, "fade");
      });

    /* Map buttons on Todo page collapsible headers */
    $(document).on("vclick", ".todo-map-btn", function(event) {
      // Note this is not an <a> tag, so don't need to worry about click
      var $span = $(this),
          $collapsible = $span.closest(".ui-collapsible"),
          listID = $collapsible.jqmData("list-id");
      showMap("todo=" + listID, "fade");
      });

    });

  $(document).on("pageremove", ".map-page", function() {
    var $page = $(this),
        gmap = $page.jqmData("gmap");
    stopGeolocation();
    gmap.destroy();
  });

  // Initialize a map page
  $(document).on( "pageinit", ".map-page", function() {
    var
      $page = $( this ),
      knownLocation = false,
      defaultLoc = new google.maps.LatLng(defaultLat, defaultLng ),
      userLoc = undefined,                             // Initially unknown
      centerLoc = defaultLoc,                          // Where to center the map
      tripOriginLoc = userLoc,                         // Origin of trip for distance, directions
      fullLoad = false,
      loadingSingle = false,
      findMe = false,
      $canvas = $page.find( ".map-canvas" ),   // The element that holds the map
      gmap,     // The jquery.ui-map object
      map,      // The Google map object
      $to = $page.find( ".to" ),
      $toPretty = $page.find( ".toPretty" ),
      $from = $page.find( ".from" ),
      $fromPretty = $page.find( ".fromPretty" ),
      $directionsFields = $page.find( ".directionsFields" ),
      $markerList = $page.find( ".marker-list"),
      $markerListSubpage = $page.find(".markerlist-subpage"),
      markerListScroller = $markerListSubpage.jqmData("iscrollview"),
      markerListview = $markerList.jqmData( "listview" ),
      $markerListNote = $page.find( ".markerListNote" ),
      $submitDirections = $page.find( ".submitDirections" ),
      $results = $page.find( ".results" ),
      $markerListBtn = $page.find(".markerListBtn"),
      $mapBtn = $page.find(".mapBtn"),
      $topMarkerNav = $page.find(".topMarkerNav"),
      $directions = $page.find(".directions"),
      $headerTitle = $page.find(".mapsheader h1"),
      $locationBtn = $page.find(".locationBtn"),
      $activeGroupButton,
      infoBox,
      urlVars,
      selGroup,
      selItem,
      selLocation,
      selLocationMe,
      selTodo,
      $noLocationPopup = $(".no-location-popup"),
      staticHereMarker,
      geoLocationMarker,
      geoLocationTimeoutID,
      geoLocationContinuous = false,   // True for continuous gelocation. Set/reset by location button
      geocoder = new google.maps.Geocoder(),
      geocoderBusy = false,      // True is a geocoding request is outstanding
      geocodingDeferred = false, // True if a geocoding request has been deferred due to outstanding request
      deferredGeocodingType,     // Type of deferred geocoding, 0 = to, 1 = from
      lastGeocodeTime,           // Last time that a geocoding request was made
      boundsChangedListener,
      zoomChangeTimer,
      zoomStartTime,             // Timestamp when last zoom step started

// Smooth zoom from current level to desired level
// Google Maps V3 doesn't provide this functionality. It will only smooth zoom one level
// TODO: measure actual time between steps, and either subtract from timer or skip
// steps
smoothZoom = function(targetZoom) {
  var currentZoom = map.getZoom(),
      nextZoom;
  if (currentZoom === targetZoom) {
    return;
    }
  nextZoom = currentZoom + (currentZoom > targetZoom ? -1 : 1);
  zoomStartTime = new Date();
  map.setZoom(nextZoom);
  boundsChangedListener = google.maps.event.addListener(map, 'bounds_changed', function(event){
    var elapsed = new Date() - zoomStartTime,
        pauseTime = (elapsed < smoothZoomTimePerLevel) ? smoothZoomTimePerLevel : 0;
    google.maps.event.removeListener(boundsChangedListener);
    boundsChangedListener = undefined;
    zoomChangeTimer = setTimeout(function() {
      zoomChangeTimer = undefined;
      smoothZoom(targetZoom);
      }, smoothZoomTimePerLevel);
      });
  },

zoomTo = function(targetZoom) {
    if (useSmoothZoom) {
    // Cancel any previous listener
      if (boundsChangedListener) {
        google.maps.event.removeListener(boundsChangedListener);
        zoomnChangedListener = undefined;
        }
      // Cancel any previous timer
      if (zoomChangeTimer) {
        clearTimeout(zoomChangeTimer);
        zoomChangeTimer = undefined;
        }
      smoothZoom(targetZoom);
      }
    else {
      gmap.option( "zoom", targetZoom );
      }
  },

//-----------------------------------------------------------------------
// Determine the box-sizing model of an element
// While jQuery normalizes box-sizing models when retriving geometry,
// it doesn't consider it when SETTING geometry. So, this is useful when
// setting geometry. (e.g. the height of the wrapper)
//-----------------------------------------------------------------------
getBoxSizing = function($elem) {
  var $html = $("html"),
      isFirefox = $html.hasClass("is-firefox"),
      isWebkit = $html.hasClass("is-webkit"),
      boxSizing,
      prefix = "";

  if (isFirefox)     { prefix = "-moz-"; }
  else if (isWebkit) { prefix = "-webkit-"; } // note: can drop prefix for Chrome >=10, Safari >= 5.1 (534.12)
  boxSizing = $elem.css(prefix + "box-sizing");
  if (!boxSizing && prefix) { boxSizing = $elem.css("box-sizing"); }  // Not found, try again with standard CSS
  if (!boxSizing) {     // Still not found - no CSS property available to guide us.
    // See what JQuery thinks the global box model is
    if ($.boxModel) { boxSizing = "content-box"; }
    else            { boxSizing = "border-box"; }
    }
  return boxSizing;
  },

//-----------------------------------------------------------------
// Get the height adjustment for setting the height of an element,
// based on the content-box model
//-----------------------------------------------------------------
getHeightAdjustForBoxModel = function($elem) {
  // Take into account the box model. This defaults to either W3C or traditional
  // model for a given browser, but can be overridden with CSS
  var adjust;
  switch (getBoxSizing($elem)) {
    case "border-box":      // AKA traditional, or IE5 (old browsers and IE quirks mode)
      // only subtract margin
      adjust = $elem.outerHeight(true) - $elem.outerHeight();
      break;

    case "padding-box":    // Firefox-only
      // subtract margin and border
      adjust = $elem.outerHeight() - $elem.height();
      break;

    case "content-box":     // AKA W3C  Ignore jshint warning
    default:                // Ignore jslint warning
      // We will subtract padding, border, margin
      adjust = $elem.outerHeight(true) - $elem.height();
      break;
    }
  return adjust;
  },

//--------------------------------------------------------
// Calculate total bar heights.
// code taken from jquery.mobile.iscrollview and slightly modified
//--------------------------------------------------------
calculateBarsHeight = function() {
  var barsHeight = 0,
      fixedHeightSelector = ":jqmData(role='header'), :jqmData(role='footer'), :jqmData(iscroll-fixed)",
      // Persistent footers are sometimes inside the page, sometimes outside of all pages! (as
      // direct descendant of <body>). And sometimes both. During transitions, the page that
      // is transitioning in will have had it's persistent footer moved outside of the page,
      // while all other pages will have their persistent footer internal to the page.
      //
      // To deal with this, we find iscroll-fixed elements in the page, as well as outside
      // of the page (as direct descendants of <body>). We avoid double-counting persistent
      // footers that have the same data-id. (Experimentally, then, we also permit the user
      // to place fixed-height elements outside of the page, but unsure if this is of any
      // practical use.)
      $barsInPage = $page.find(fixedHeightSelector),
      $barsOutsidePage = $("body").children(fixedHeightSelector);

  $barsInPage.each(function() {  // Iterate over headers/footers/etc.
      barsHeight += $(this).outerHeight(true);
      });

  $barsOutsidePage.each(function() {
    var id = $(this).jqmData("id");  // Find data-id if present
    // Count bars outside of the page if they don't have data-id (so not a persistent
    // footer, but something the developer put there and tagged with data-iscroll-fixed class),
    // or if a matching data-id is NOT found among the bars that are inside the page.
    if (id === "" || !$barsInPage.is( ":jqmData(id='" + id + "')" )) {
      barsHeight += $(this).outerHeight(true);
      }
    });
  return barsHeight;
  },

//--------------------------------------------------------
//Resize the map canvas to fill the
// viewport remaining after all fixed-height elements
// Code taken from jquery.mobile.iscrollview, and slightly
// modified.
//--------------------------------------------------------
resizeMapCanvas = function() {
  var then = null,
       viewportHeight,
       barsHeight,
       newWrapperHeight,
       $html = $("html"),
       isAppleWebkitMobile = $html.hasClass("is-apple-webkit-mobile"),
       isAppleWebkitFullScreen = $html.hasClass("is-apple-webkit-fullscreen"),
       isIpad = $html.hasClass("is-ipad"),
       wrapperHeightAdjustForBoxModel = getHeightAdjustForBoxModel($canvas);

  $canvas.trigger("updatelayout");  // Let jQuery mobile update fixed header/footer, collapsables, etc.
  // Get technically-correct viewport height. jQuery documentation is in error on this.
  // The viewport height is NOT in all cases the same as the window height, because the height
  // of window might have been manually set. And, guess what? jQuery Mobile sets it to 99.99%.
  // The viewport is considered the parent of window, and can be retrieved as shown below.
  // At 99.99% and common browser sizes, this is probably not an issue. But let's do it right.
  //viewportHeight = this.$window.height();   // Wrong
  viewportHeight = document.documentElement.clientHeight;
  //barsHeight = calculateBarsHeight();
  barsHeight = 40 /* header */ + 58 /* footer/tabbbar */ + ( loadingSingle ? 0 : 64 /* trail tabbar */ );

  newWrapperHeight =
    viewportHeight -
    barsHeight -                        // Height of fixed bars or "other stuff" outside of the wrapper
    wrapperHeightAdjustForBoxModel  +       // Make adjustment based on content-box model
    // Note: the following will fail for Safari desktop with Develop/User Agent/iPhone
    // Fake fullscreen or webview by using custom user agent and removing "Safari" from string
    (isAppleWebkitMobile && (!isAppleWebkitFullScreen) && (!isIpad) ? 60 : 0);  // Add 60px for space recovered from Mobile Safari address bar

  $canvas.css("height", newWrapperHeight);
  },

// _info_window.js.erb start
closeInfoWindow = function() {
  if (infoBox) {
    infoBox.close();
    infoBox = null;
    }
  },

openInfoWindow = function(place, markerElement) {
  var url = markerLink(place),
      box = '<div class="inner"><a class="infobox-link" onclick="onInfoWindowLink(' + "'" + url + "'" + ');" >'  + place.title + '</a></div>',
      coords = place.position.split(","),
      lat = trim(coords[0]),
      lng = trim(coords[1]),
      options = {
        content: box,
        closeBoxMargin: "14px 5px 2px 2px",
        closeBoxURL: baseUri + "map/images/298-circlex.png",
        infoBoxClearance: 2,
        pixelOffset: infoBoxOffset
        };
  closeInfoWindow();  // Close the previous info window, if open
  centerLoc = new google.maps.LatLng(lat, lng);
  gmap.option( "center", centerLoc );
  infoBox = new InfoBox(options);
  infoBox.open(map, markerElement);

  if ( (!loadingSingle) && knownLocation ) {
    $to.attr("value",  place.position);
    $toPretty.attr("value", place.title);
    $directionsFields.show();
    }
},
// _info_window.js.erb end
// _marker.js.erb start
// Map functions dealing with the markerlist. This is the list of places shown underneath
// the map, which correspond to the trail markers shown on the map.

showMarkerList = function(){
var myMarkers = gmap.get( "markers" ),
    list = "",
    $markerListItems;

  $.each( myMarkers, function(i, tmarker) {
    list += buildMarkerListItem( tmarker );
    });

  $markerList.empty().append(list);

  // sort list by nearest and apply jQuery Mobile UI
  $markerListItems = $markerList.find("li");
  $markerListItems.tsort("span.ml-sort");

  markerListview.refresh();
  $markerListNote.show();
  },

// Update the marker list distances
  updateMarkerListDistances = function() {
  // To be completed
  },

// Builds a single markerlist item, returns it
buildMarkerListItem = function(marker) {
  var position = marker.position,
      title = marker.mTitle,
      group = marker.group,
      link = marker.mLink,
      endRes = userLoc ? getMarkerDistance( position.lat(), position.lng(), userLoc.lat(), userLoc.lng() ) : 0,
      base = markerListItemTemplate,
      groupUC = group.charAt().toUpperCase() + group.slice(1);
  if ( groupShowAlways(group) ) {
    return "";
    }
  endRes = Math.round( endRes*10 ) / 10;
  base = base.replace( "|pin|", groupUC);
  base = base.replace( "|res|", res);
  base = base.replace( "|alt|", groupUC );
  base = base.replace( "|link|", link.length ? link : "#" );
  if (knownLocation) {
    base = base.replace( "|title|", title);
    base = base.replace( "|distance|", '<span class="ui-li-count"><span class="ml-sort">' + endRes + "</span>km</span>" );
    }
  else {
    base = base.replace( "|title|", '<span class="ml-sort">' + title + "</span>" );
    base = base.replace( "|distance|", "" );
    }
  return base;
  },

markerListULReset = function() {
  $markerList.empty();
  $markerListNote.hide();
},

markerLink = function(place) {
  var group = place.group,
      dir = group.charAt(0).toUpperCase() + group.slice(1);
  return baseUri + dir + "/" + place.item + ".html";
  }
// _marker_list.js.erb end
,
// _location.js.erb start
addStaticHereMarker = function( pos ) {
    staticHereMarker = gmap.addMarker( {
      icon: hereMarker,
      id: "client",
      position: pos,
      bounds: false,
      optimized: false,
      title: "My Location",
      visible: true,
      flat: true,
      zIndex: hereMarkerZindex,
      } ).click(function() {addMyLocation()} );
    },

removeStaticHereMarker = function() {
  if (staticHereMarker) {
    staticHereMarker.get(0).setMap(null);
    staticHereMarker = undefined;
    }
  },

stopGeolocation = function() {
  if (geoLocationTimeoutID) {
    clearTimeout(geoLocationTimeoutID);
    geoLocationTimeoutID = undefined;
    }
  if (geoLocationMarker) {
    geoLocationMarker.unbindAll();
    geoLocationMarker.setMap(null);
    geoLocationMarker = undefined;
    $locationBtn.removeClass("on disabled").addClass("off");
    }
  },

// Callback to shut off geolocation after a timeout
geoLocationTimeout = function() {
  logTime("geolocation timed-out, stopping geolocation");
  geoLocationTimeoutID = undefined;
  if (geoLocationMarker) {
    addStaticHereMarker(geoLocationMarker.getPosition());
    stopGeolocation();
    }
  },

// Add a dynamic geolocation marker and start gelocation
// If continuous=true, keep geolocation active, else stop after a timeout
addMyLocation = function() {
  // If we have a marker active already, simply reset it's timeout
  if (geoLocationMarker) {
    logTime("dynamic here marker already active - resetting timeout");
    if (geoLocationTimeoutID) {
      clearTimeout(geoLocationTimeoutID);
      geoLocationTimeoutID = undefined;
      }
    if (!geoLocationContinuous) {
      geoLocationTimeoutID = setTimeout(geoLocationTimeout, geoLocationActiveTime);
      }
    return;
    }

  logTime("Adding dynamic here marker");
  removeStaticHereMarker();
  geoLocationMarker = new GeolocationMarker(map);
  geoLocationMarker.setPositionOptions( { enableHighAccuracy: true } );

  // updated accuracy callback
  // We don't currently do anything here except log.
  // The marker code handles changing the circle diameter
  // This would be the place to display accuracy if we want to show a numeric figure
  geoLocationMarker.addListener("accuracy_changed", function() {
    var accuracy = geoLocationMarker.getAccuracy(),
        position = geoLocationMarker.getPosition();
    logTime("geolocation accuracy_changed to " + accuracy + " position = " + position);
  });

  // updated location callback
  geoLocationMarker.addListener("position_changed", function() {
    var position = geoLocationMarker.getPosition(),
        accuracy = geoLocationMarker.getAccuracy(),
        lat = position.lat(),
        lng = position.lng(),
        distFromDefaultLoc = getMarkerDistance( lat, lng, defaultLoc.lat(), defaultLoc.lng() );
    outOfRegion = (!testingOutOfRegion) && (distFromDefaultLoc > maxNearbyDist);
    logTime("geolocation position_changed to " + position, + " accuracy = ", + accuracy);

    userLoc = position;
    tripOriginLoc = userLoc;
    makePrettyAddress(tripOriginLoc, 1);

    // Location unknown -> known
    if (!knownLocation) {
      $markerListNote.text( markerListNoteLocationKnown );
      $from.val( tripOriginLoc.lat() + "," + tripOriginLoc.lng() );   // Set from field for directions
      if (loadingSingle) {
        $directionsFields.show();
        }
      knownLocation = true;
      showMarkerList();
      }
    else {
      updateMarkerListDistances();
      }

    if (findMe) {
      zoomTo(zoomLevelUser);
    }

    if ( (!outOfRegion) && (selTodo === undefined) ) {
      // Update map center and zoom
      centerLoc = userLoc;
      gmap.option( "center", centerLoc );
      if (!findMe) {
        gmap.option( "zoom", zoomLevelNearby );
        }
      }
    });

  // Error callback
  geoLocationMarker.addListener("geolocation_error", function(error) {
    var code = error.code,
        message = error.message;
    logTime("geolocation_error " + code + " " + message);
    userLoc = undefined;
    tripOriginLoc = undefined;
    knownLocation = false;
    $markerListNote.text( markerListNoteLocationUnknown );
    $from.val("");    // Clear from field for directions
    $directionsFields.hide();
    stopGeolocation();
   $locationBtn.removeClass("on off").addClass("disabled");
    showMarkerList();   // Redundant if error callback subsequent to valid location, unlikely scenario
  });


   $locationBtn.removeClass("off disabled").addClass("on");
  // Set timer to stop geolocation after an interval
  if (!geoLocationContinuous) {
    geoLocationTimeoutID = setTimeout(geoLocationTimeout, geoLocationActiveTime);
    }
},

// _location.js.erb end

// _create.js.erb start

// Not really "create" - map is already created
// Modifies the map and map page, based on URL params
createMap = function() {
    var lists, title;

    // attempt to get specifc marker data from item  page
    urlVars = getUrlVars();
    selGroup = urlVars["section"] || "";
    selItem = urlVars["item"] || "";
    selLocation = urlVars["location"] || "";
    selLocationMe = selLocation === "me";
    selTodo = urlVars["todo"],   // This one only, undefined if not present
    todoCount = 0;               // Count of ToDo items to map

    if (selTodo) {
      selTodo = parseInt(selTodo);  // Default to 0 (Favourites) if not an integer
      todoCount = localStore.listCount(selTodo);
      }
    else {
      selTodo = undefined;   // Make sure it is undefined (in case just empty) since we test against undefined specifically
    }

    loadingSingle = false;
    fullLoad = false;

    // Single place = "get directions"  group=<group name>&item=<item name>
    if ( selItem.length && selGroup.length ){
      loadingSingle = true;
      selTodo = undefined;
      }
    // Group - clicked on a group header in Browse (same result as group button on map )
    // group=<group name>
    else if (selGroup.length) {
      selItem = "";
      selTodo = undefined;
      }
    // Todo list. 0=Favourites, 1-n - Itineraries (todo=n)
    else if (selTodo !== undefined) {
      lists = localStore.getLists();
      title = lists[selTodo].title;
      $headerTitle.text(title);
      $topMarkerNav.height(0).hide().trigger("updatelayout");
      selItem = "";
      selGroup = "";
      }
    // All places "nearby" button (location=me)
    else {
      fullLoad = true;
      selItem = "";
      selGroup = "";
      $headerTitle.text("Nearby");

      }
    // Set the appropriate tabbar button active
    if (selLocationMe) {
      $activeGroupButton = $page.find(".markerNav:jqmData(group=all)");
      $activeGroupButton.addClass("ui-btn-active");
      }
    else if (selGroup) {
      if ($activeGroupButton) {
        $activeGroupButton.removeClass("ui-btn-active");
        }
      $activeGroupButton = $page.find(".markerNav:jqmData(group=" + selGroup + ")" );
      $activeGroupButton.addClass("ui-btn-active");
      }

    gmap.option( "zoom", (loadingSingle || selTodo !== undefined) ? zoomLevelPlace : zoomLevelNearby );

    //---------- Add markers for selected places ------------v

    gmap.clear( "markers" );
    gmap.set( "bounds", null );
    $.each( places, function(i, place) {
      var group = place.group,
          item = place.item,
          position = place.position,
          title = place["title"],
          coords = place.position.split(","),
          lat = trim(coords[0]),
          lng = trim(coords[1]),
          showAlways = groupShowAlways(group),
          zIndex = groupZindex(group);

      if ( ( (selTodo === undefined) && (selGroup === group) && ( (selItem.length === 0) || (selItem === item) ) )
           || ( ( selTodo !== undefined ) && (localStore.isInList(selTodo, group, item)  === selTodo) )
           || showAlways
           || fullLoad
        ) {
        if ( (loadingSingle) ||
             (selTodo !== undefined && todoCount === 1 && !showAlways)   // Todo with only one place
           ) {  // Want to see single place - "directions"
          centerLoc = new google.maps.LatLng(lat, lng); // Center on the place
          gmap.option( "center", centerLoc );
          }

        if ( loadingSingle ) {
          $to.attr("value",  place.position);          // Prepare to get directions,
          $toPretty.attr("value", title);        // But don't show direcitons fields yet
                                                       // (Not until/unless we get user location )
          }

        gmap.addMarker( {
          position: position,
          bounds: (selTodo !== undefined) && (todoCount > 1) && (!showAlways),
          optimized: false,
          flat:true,
          icon: groupIcon(group),
          group: group,
          mTitle: title,
          mLink: markerLink(place),
          zIndex: zIndex
          } ).click(function() { openInfoWindow(place, this); });

        }
    });

    //--------------- each  --------------------------------^

  if (loadingSingle) {
    $topMarkerNav.height(0).hide().trigger("updatelayout");
    $headerTitle.text("Directions");
    }

  addMyLocation();

  var bounds = gmap.get("bounds");
    setTimeout ( function() {
      if (bounds) {
        map.fitBounds(bounds);
        gmap.refresh();
        }
      else {
        gmap.refresh();
      }
    }, 0);


  }
// _create_=.js.erb end

// _page_utils.js.erb start
// Utility functions to be defined inside the pageinit callback
// Create a form field with street address from coordinates
// type = 0, "to" address (not used, becuase we use the description from the places table)
// type = 1, "from" address (user location)
makePrettyAddress = function( loc, type ) {
  if (geocoderBusy) {
    logTime("geocoder is busy, so request has been deferred");
    geocodingDeferred = true;
    deferredGeocodingType = type;
    return;
  }
  geocoderBusy = true;
  geocoder.geocode( {location: loc}, function(addresses, status ) {
    if (status === google.maps.GeocoderStatus.OK) {
      if (type === 1 ){
        $fromPretty.attr( "value", addresses[0].formatted_address);
        }
      else {
        $toPretty.attr( "value", addresses[0].formatted_address );
        }
      }
    geocoderBusy = false;
    });
  },

// Get the URL parameters
getUrlVars = function()
  {
  var vars = [],
      hash,
      i,
      //url = $page.data("url"),
      //hashes = url.toLowerCase().slice(url.indexOf("?") + 1).split("&");
      hashes = mapQuery.toLowerCase().split("&");
  for(i = 0; i < hashes.length; i++) {
    hash = hashes[i].split("=");
    vars.push(hash[0]);
    vars[hash[0]] = hash[1];
    }
  return vars;
  }
// _page_utils.js.erb end
      ;

//_page_events.js.erb start

// Modify map according to mapQuery, if mapQuery is present and has changed
$page.on( "pagebeforeshow", function() {
  if (mapQuery && ( mapQuery !== previousMapQuery) ) {
    createMap();
    previousMapQuery = mapQuery;
    mapQuery = undefined;
    }
  resizeMapCanvas();
  gmap.refresh();
  });

$page.on( "pagehide", function() {
  stopGeolocation();
  });

$(window).on("resize", function( event ) {
  resizeMapCanvas();
  gmap.refresh();
  });


$markerListBtn.on("vclick click", function (event) {
  event.preventDefault();
  if (event.type === "click") { return; }  // For click, prevent the default action, since we already
                                       // did everything we want on the vclick
  if ( $markerListSubpage.hasClass("subpage-active") ) { return; }
  $markerListSubpage.removeClass("out reverse").addClass("subpage-active slideup in");
  markerListScroller.refresh();
  $markerListSubpage.animationComplete( function () {
    $markerListSubpage.removeClass("slideup in reverse");
    });
  });

$mapBtn.on("vclick click", function (event) {
  event.preventDefault();
  if (event.type === "click") { return; }  // For click, prevent the default action, since we already
                                       // did everything we want on the vclick
  if ( !($markerListSubpage.hasClass("subpage-active") ) ) { return; }
  $markerListSubpage.removeClass("in").addClass("slideup out reverse");
  $markerListSubpage.animationComplete( function () {
    $markerListSubpage.removeClass("subpage-active slideup out reverse");
    });
  });

// Top Navbar buttons. Shows markers for each trail ---
$topMarkerNav.on("vclick click", ".markerNav", function( e ) {

  e.preventDefault();
  if (e.type === "click") { return; }  // For click, prevent the default action, since we already
                                       // did everything we want on the vclick

  var $button = $(this),
      selGroup = $button.jqmData( "group" );

  closeInfoWindow();
  if ($activeGroupButton) {
    $activeGroupButton.removeClass("ui-btn-active");
    }
  $button.addClass("ui-btn-active");
  $activeGroupButton = $button;
  gmap.clear( "markers" );
  gmap.set( "bounds", null );
  fullLoad = selGroup === "all";

  zoomTo( knownLocation ? zoomLevelNearby : zoomLevelAll );

  addMyLocation();

  $.each( places, function(i, place) {
    var group = place.group,
        item = place.item,
        position = place.position,
        coords = place.position.split(","),
        lat = trim(coords[0]),
        lng = trim(coords[1]),
        showAlways = groupShowAlways(group),
        zIndex = groupZindex(group);

    if ( fullLoad || showAlways || group === selGroup ){
      gmap.addMarker( {
        position: position,
        bounds: false,
        optimized: false,
        flat: true,
        icon: groupIcon(group),
        group: group,
        mTitle: place.title,
        mLink: markerLink(place),
        zIndex: zIndex,
        }).click(function() {openInfoWindow(place, this); });
      }

    });

});

$submitDirections.on("click",  function () {
  gmap.displayDirections ( {
    origin: $from.val(),
    destination: $to.val(),
    travelMode: google.maps.DirectionsTravelMode.DRIVING
    },
    { panel: $directions[0] },
    function (success, response) {
      if (success) {
        $results.show();
        }
      else {
        $results.hide();
        }
    });
  return false;
  });

// Location button in header bar
$locationBtn.on("vclick click", function(event) {

  event.preventDefault();
  if (event.type === "click") { return; }  // For click, prevent the default action, since we already
                                       // did everything we want on the vclick

  if ($locationBtn.hasClass("on")) {
    if (geoLocationMarker) {
      findMe = false;
      addStaticHereMarker(geoLocationMarker.getPosition());
      }
    geoLocationContinuous = false;
    stopGeolocation();
    }
  else {
    findMe = true;
    if (knownLocation) {
      zoomTo(zoomLevelUser);
      }
    geoLocationContinuous = true;
    addMyLocation();
    }
  });

// _page_events.js.erb end

  // Instantiate the map object on the canvas element
  $canvas.gmap( {
    center: defaultLoc,
    zoom: zoomLevelAll,
    <% if build_target == 'debug' %>
      zoomControlOptions: {
        style: google.maps.ZoomControlStyle.SMALL
      },
    <% end %>
    callback: function() {
      gmap = this;
      $page.jqmData("gmap", gmap);
      map = gmap.get("map");
      }
    });

  });  // pageinit

});  // Outer closure
